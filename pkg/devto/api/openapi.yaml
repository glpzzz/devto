openapi: 3.0.2
info:
  contact:
    email: yo@dev.to
    name: DEV Team
    url: https://dev.to/contact
  description: Access DEV articles, comments and other resources via API
  termsOfService: https://dev.to/terms
  title: DEV API (beta)
  version: 0.5.9
  x-logo:
    url: https://practicaldev-herokuapp-com.freetls.fastly.net/assets/devlogo-pwa-128-1a9016906487b8ba17f2d3d3c28f9d1cb3ae9b45d685cc2711e20f6b3c6730df.png
    backgroundColor: '#000'
    altText: DEV logo
servers:
- description: Production server
  url: https://dev.to/api
tags:
- description: Articles are all the posts users create on DEV
  name: articles
- description: Users own resources that require authentication
  name: users
- description: Webhooks are HTTP endpoints registered to receive events
  name: webhooks
paths:
  /articles:
    get:
      description: |
        This endpoint allows the client to retrieve a list of articles.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        By default it will return featured, published articles ordered
        by descending popularity.

        Each page will contain `30` articles.

        Responses, according to the combination of params, are cached for 24 hours.
      operationId: getArticles
      parameters:
      - description: |
          Pagination page.

          This param can be used in conjuction with all other params
          (except when asking for fresh and rising articles by themselves).
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |
          Adding this parameter will return articles that contain the
          requested tag.

          This param can be used by itself, with `page` or with `top`.
        example: discuss
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: |
          Adding this parameter will return articles belonging to a User or Organization
          ordered by descending `published_at`.

          If `state=all` the number of items returned will be `1000` instead of the default `30`.

          This param can be used by itself or only with `page` and `state`.
        example: ben
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: |
          Adding this will allow the client to check which articles are fresh or rising.

          If `state=fresh` the server will return published fresh articles.
          If `state=rising` the server will return published rising articles.

          This param can only be used by itself or with `username` if set to `all`.
        example: ben
        explode: true
        in: query
        name: state
        required: false
        schema:
          type: string
        style: form
      - description: |
          Adding this will allow the client to return the most popular articles
          in the last `N` days.

          `top` indicates the number of days since publication of the articles
          returned.

          This param can only be used by itself or with `tag`.
        example: 2
        explode: true
        in: query
        name: top
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              examples:
                articles-success:
                  $ref: '#/components/examples/ArticlesIndex'
              schema:
                items:
                  $ref: '#/components/schemas/ArticleIndex'
                type: array
          description: A list of articles
      summary: Published articles
      tags:
      - articles
      x-code-samples:
      - lang: Shell
        label: curl (all articles)
        source: |
          curl https://dev.to/api/articles
      - lang: Shell
        label: curl (user's articles)
        source: |
          curl https://dev.to/api/articles?username=ben
    post:
      description: |
        This endpoint allows the client to create a new article.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        ### Rate limiting

        There is a limit of 10 articles created each 30 seconds by the same user.

        ### Additional resources

        - [Rails tests for Articles API](https://github.com/thepracticaldev/dev.to/blob/master/spec/requests/api/v0/articles_spec.rb)
      operationId: createArticle
      requestBody:
        content:
          application/json:
            examples:
              article-create-title-body:
                $ref: '#/components/examples/ArticleCreateTitleBody'
              article-create-front-matter:
                $ref: '#/components/examples/ArticleCreateFrontMatter'
              article-create-organization:
                $ref: '#/components/examples/ArticleCreateOrganization'
            schema:
              $ref: '#/components/schemas/ArticleCreate'
        description: Article to create
      responses:
        201:
          content:
            application/json:
              examples:
                article-success:
                  $ref: '#/components/examples/ArticleShow'
              schema:
                $ref: '#/components/schemas/ArticleShow'
          description: A newly created article
          headers:
            Location:
              description: The URL of the new article
              explode: false
              schema:
                format: url
                type: string
              style: simple
        400:
          content:
            application/json:
              examples:
                error-bad-request:
                  $ref: '#/components/examples/ErrorBadRequest'
              schema:
                $ref: '#/components/schemas/APIError'
          description: BadRequest
        401:
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: '#/components/examples/ErrorUnauthorized'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Unauthorized
        422:
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: '#/components/examples/ErrorUnprocessableEntity'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Unprocessable Entity
      security:
      - api_key: []
      - oauth2: []
      summary: Create a new article
      tags:
      - articles
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -X POST -H "Content-Type: application/json" \
            -H "api-key: API_KEY" \
            -d '{"article":{"title":"Title","body_markdown":"Body","published":false,"tags":["discuss", "javascript"]}}' \
            https://dev.to/api/articles
      - lang: Shell
        label: curl (with front matter)
        source: |
          curl -X POST -H "Content-Type: application/json" \
          -H "api-key: API_KEY" \
          -d '{"article":{"body_markdown":"---\ntitle:A sample article about...\npublished:false\n---\n..."}}' \
          https://dev.to/api/articles
  /articles/{id}:
    get:
      description: |
        This endpoint allows the client to retrieve a single
        published article given its `id`.

        Responses are cached for 5 minutes.
      operationId: getArticleById
      parameters:
      - description: Id of the article
        example: 150589
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              examples:
                article-success:
                  $ref: '#/components/examples/ArticleShow'
              schema:
                $ref: '#/components/schemas/ArticleShow'
          description: An article
        404:
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: '#/components/examples/ErrorNotFound'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Resource not found
      summary: A published article
      tags:
      - articles
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl https://dev.to/api/articles/150589
    put:
      description: |
        This endpoint allows the client to updated an existing article.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        ### Rate limiting

        There are no limits on the amount of updates.

        ### Additional resources

        - [Rails tests for Articles API](https://github.com/thepracticaldev/dev.to/blob/master/spec/requests/api/v0/articles_spec.rb)
      operationId: updateArticle
      parameters:
      - description: Id of the article
        example: 150589
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              article-update-title-body:
                $ref: '#/components/examples/ArticleCreateTitleBody'
              article-update-front-matter:
                $ref: '#/components/examples/ArticleCreateFrontMatter'
              article-update-organization:
                $ref: '#/components/examples/ArticleCreateOrganization'
            schema:
              $ref: '#/components/schemas/ArticleUpdate'
        description: |
          Article params to update.

          *Note: if the article contains a front matter in its body, its front
          matter properties will still take precedence over any JSON equivalent
          params, which means that the full body_markdown with the modified
          front matter params needs to be provided for an update to be successful*
      responses:
        200:
          content:
            application/json:
              examples:
                article-success:
                  $ref: '#/components/examples/ArticleShow'
              schema:
                $ref: '#/components/schemas/ArticleShow'
          description: The updated article
        400:
          content:
            application/json:
              examples:
                error-bad-request:
                  $ref: '#/components/examples/ErrorBadRequest'
              schema:
                $ref: '#/components/schemas/APIError'
          description: BadRequest
        401:
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: '#/components/examples/ErrorUnauthorized'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Unauthorized
        422:
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: '#/components/examples/ErrorUnprocessableEntity'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Unprocessable Entity
      security:
      - api_key: []
      - oauth2: []
      summary: Update an article
      tags:
      - articles
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -X PUT -H "Content-Type: application/json" \
            -H "api-key: API_KEY" \
            -d '{"article":{"title":"Title"}' \
            https://dev.to/api/articles/{id}
  /articles/me:
    get:
      description: |
        This endpoint allows the client to retrieve a list of published articles
        on behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        Published articles will be in reverse chronological publication order.

        It will return published articles with pagination.
        By default a page will contain `30` articles.
      operationId: getUserArticles
      parameters:
      - description: Pagination page.
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Page size (defaults to 30 with a maximum of 1000).
        example: 30
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArticleMe'
                type: array
          description: A list of published articles
      security:
      - api_key: []
      - oauth2: []
      summary: User's articles
      tags:
      - articles
      - users
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -H "api-key: API_KEY" https://dev.to/api/articles/me
  /articles/me/published:
    get:
      description: |
        This endpoint allows the client to retrieve a list of published articles
        on behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        Published articles will be in reverse chronological publication order.

        It will return published articles with pagination.
        By default a page will contain `30` articles.
      operationId: getUserPublishedArticles
      parameters:
      - description: Pagination page.
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Page size (defaults to 30 with a maximum of 1000).
        example: 30
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArticleMe'
                type: array
          description: A list of published articles
      security:
      - api_key: []
      - oauth2: []
      summary: User's published articles
      tags:
      - articles
      - users
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -H "api-key: API_KEY" https://dev.to/api/articles/me/published
  /articles/me/unpublished:
    get:
      description: |
        This endpoint allows the client to retrieve a list of unpublished articles
        on behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        Unpublished articles will be in reverse chronological creation order.

        It will return unpublished articles with pagination.
        By default a page will contain `30` articles.
      operationId: getUserUnpublishedArticles
      parameters:
      - description: Pagination page.
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Page size (defaults to 30 with a maximum of 1000).
        example: 30
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArticleMe'
                type: array
          description: A list of articles
      security:
      - api_key: []
      - oauth2: []
      summary: User's unpublished articles
      tags:
      - articles
      - users
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -H "api-key: API_KEY" https://dev.to/api/articles/me/unpublished
  /articles/me/all:
    get:
      description: |
        This endpoint allows the client to retrieve a list of all articles on
        behalf of an authenticated user.

        "Articles" are all the posts that users create on DEV that typically
        show up in the feed. They can be a blog post, a discussion question,
        a help thread etc. but is referred to as article within the code.

        It will return both published and unpublished articles with pagination.

        Unpublished articles will be at the top of the list in reverse chronological creation order.
        Published articles will follow in reverse chronological publication order.

        By default a page will contain `30` articles.
      operationId: getUserAllArticles
      parameters:
      - description: Pagination page.
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Page size (defaults to 30 with a maximum of 1000).
        example: 30
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArticleMe'
                type: array
          description: A list of articles
      security:
      - api_key: []
      - oauth2: []
      summary: User's all articles
      tags:
      - articles
      - users
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -H "api-key: API_KEY" https://dev.to/api/articles/me/all
  /webhooks:
    get:
      description: |
        This endpoint allows the client to retrieve a list of webhooks they have
        previously registered.

        "Webhooks" are used to register HTTP endpoints that will be called once a relevant event is
        triggered inside the web application, events like `article_created`, `article_updated`.

        It will return all webhooks, without pagination.
      operationId: getWebhooks
      responses:
        200:
          content:
            application/json:
              examples:
                webhooks-success:
                  summary: Successful response
                  value:
                  - type_of: webhook_endpoint
                    id: 1
                    source: DEV
                    target_url: https://example.com/webhooks/webhook1
                    events:
                    - article_created
                    created_at: 2019-09-02T09:47:39.230Z
              schema:
                items:
                  $ref: '#/components/schemas/WebhookIndex'
                type: array
          description: A list of webhooks
      security:
      - api_key: []
      - oauth2: []
      summary: Webhooks
      tags:
      - webhooks
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -H "api-key: API_KEY" https://dev.to/api/webhooks
    post:
      description: |
        This endpoint allows the client to create a new webhook.

        "Webhooks" are used to register HTTP endpoints that will be called once a relevant event is
        triggered inside the web application, events like `article_created`, `article_updated`.
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            examples:
              webhook-create:
                $ref: '#/components/examples/WebhookCreate'
            schema:
              $ref: '#/components/schemas/WebhookCreate'
        description: Webhook to create
      responses:
        201:
          content:
            application/json:
              examples:
                webhook-success:
                  $ref: '#/components/examples/WebhookShow'
              schema:
                $ref: '#/components/schemas/WebhookShow'
          description: A newly created webhook
        400:
          content:
            application/json:
              examples:
                error-bad-request:
                  $ref: '#/components/examples/ErrorBadRequest'
              schema:
                $ref: '#/components/schemas/APIError'
          description: BadRequest
        401:
          content:
            application/json:
              examples:
                error-unauthorized:
                  $ref: '#/components/examples/ErrorUnauthorized'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Unauthorized
        422:
          content:
            application/json:
              examples:
                error-unprocessable-entity:
                  $ref: '#/components/examples/ErrorUnprocessableEntity'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Unprocessable Entity
      security:
      - api_key: []
      - oauth2: []
      summary: Create a new webhook
      tags:
      - webhooks
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -X POST -H "Content-Type: application/json" \
            -H "api-key: API_KEY" \
            -d '{"webhook_endpoint":{"target_url":"https://example.org/webhooks/webhook1","source":"DEV","events":["article_created"]}}' \
            https://dev.to/api/webhooks
  /webhooks/{id}:
    delete:
      description: |
        This endpoint allows the client to delete a single
        webhook given its `id`.
      operationId: deleteWebhook
      parameters:
      - description: Id of the webhook
        example: 123
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        204:
          description: A successful deletion
        401:
          content:
            application/json:
              examples:
                article-unauthorized:
                  $ref: '#/components/examples/ErrorUnauthorized'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Unauthorized
        404:
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: '#/components/examples/ErrorNotFound'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Resource not found
      security:
      - api_key: []
      - oauth2: []
      summary: A webhook endpoint
      tags:
      - webhooks
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl -X DELETE \
            -H "api-key: API_KEY" \
            https://dev.to/api/webhooks/1
    get:
      description: |
        This endpoint allows the client to retrieve a single
        webhook given its `id`.
      operationId: getWebhookById
      parameters:
      - description: Id of the webhook
        example: 123
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              examples:
                webhook-success:
                  $ref: '#/components/examples/WebhookShow'
              schema:
                $ref: '#/components/schemas/WebhookShow'
          description: A webhook endpoint
        401:
          content:
            application/json:
              examples:
                article-unauthorized:
                  $ref: '#/components/examples/ErrorUnauthorized'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Unauthorized
        404:
          content:
            application/json:
              examples:
                article-not-found:
                  $ref: '#/components/examples/ErrorNotFound'
              schema:
                $ref: '#/components/schemas/APIError'
          description: Resource not found
      security:
      - api_key: []
      - oauth2: []
      summary: A webhook endpoint
      tags:
      - webhooks
      x-code-samples:
      - lang: Shell
        label: curl
        source: |
          curl https://dev.to/api/webhooks/123
components:
  examples:
    ErrorBadRequest:
      value:
        error: bad request
        status: 400
    ErrorNotFound:
      value:
        error: not found
        status: 404
    ErrorUnauthorized:
      value:
        error: unauthorized
        status: 401
    ErrorUnprocessableEntity:
      value:
        error: 'param is missing or the value is empty: article'
        status: 422
    ArticlesIndex:
      value:
      - type_of: article
        id: 194541
        title: There's a new DEV theme in town for all you 10x hackers out there (plus
          one actually useful new feature)
        description: ""
        cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--74Bl23tz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png
        readable_publish_date: Oct 24
        social_image: https://res.cloudinary.com/practicaldev/image/fetch/s--SeMxdKIa--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--xU8cbIK4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/8a39dzf3oovzc2snl7iv.png
        tag_list:
        - meta
        - changelog
        - css
        - ux
        tags: meta, changelog, css, ux
        slug: there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
        path: /devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
        url: https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
        canonical_url: https://dev.to/devteam/there-s-a-new-dev-theme-in-town-for-all-you-10x-hackers-out-there-plus-one-actually-useful-new-feature-2kgk
        comments_count: 37
        positive_reactions_count: 142
        collection_id: null
        created_at: 2019-10-24T13:41:29Z
        edited_at: 2019-10-24T13:56:35Z
        crossposted_at: null
        published_at: 2019-10-24T13:52:17Z
        last_comment_at: 2019-10-25T08:12:43Z
        published_timestamp: 2019-10-24T13:52:17Z
        user:
          name: Ben Halpern
          username: ben
          twitter_username: bendhalpern
          github_username: benhalpern
          website_url: http://benhalpern.com
          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--Y1sq1tFG--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png
          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--DcW51A6v--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png
        organization:
          name: The DEV Team
          username: devteam
          slug: devteam
          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--0kDBq1Ne--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png
          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--8tTU-XkZ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png
    ArticleShow:
      value:
        type_of: article
        id: 150589
        title: 'Byte Sized Episode 2: The Creation of Graph Theory '
        description: The full story of Leonhard Euler and the creation of this fundamental
          computer science principle, delivered in a few minutes.
        cover_image: https://res.cloudinary.com/practicaldev/image/fetch/s--qgutBUrH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png
        readable_publish_date: Aug  1
        social_image: https://res.cloudinary.com/practicaldev/image/fetch/s--6wSHHfwd--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png
        tag_list: computerscience, graphtheory, bytesized, history
        tags:
        - computerscience
        - graphtheory
        - bytesized
        - history
        slug: byte-sized-episode-2-the-creation-of-graph-theory-34g1
        path: /bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        canonical_url: https://dev.to/bytesized/byte-sized-episode-2-the-creation-of-graph-theory-34g1
        comments_count: 21
        positive_reactions_count: 322
        collection_id: 1693
        created_at: 2019-07-31T11:15:06Z
        edited_at: null
        crossposted_at: null
        published_at: 2019-08-01T15:47:54Z
        last_comment_at: 2019-08-06T16:48:10Z
        published_timestamp: 2019-08-01T15:47:54Z
        body_html: |
          <p>Today's episode of Byte Sized is about Leonhard Euler and the creation of <a href="https://en.wikipedia.org/wiki/Graph_theory">Graph Theory</a>.</p>

          <p>For more about how Graph Theory works, check out this video from BaseCS!</p>...
        body_markdown: "---\r\ntitle: Byte Sized Episode 2: The Creation of Graph\
          \ Theory \r\npublished: true\r\ndescription: The full story of Leonhard\
          \ Euler and the creation of this fundamental computer science principle,\
          \ delivered in a few minutes.\r\ntags: computerscience, graphtheory, bytesized,\
          \ history\r\ncover_image: https://thepracticaldev.s3.amazonaws.com/i/88e62fzblbluz1dm7xjf.png\r\
          \nseries: Byte Sized Season 1\r\n---\r\n\r\nToday's episode of Byte Sized\
          \ is about Leonhard Euler and the creation of [Graph Theory](https://en.wikipedia.org/wiki/Graph_theory).\r\
          \n\r\nFor more about how Graph Theory works, check out this video from BaseCS!..."
        user:
          name: Vaidehi Joshi
          username: vaidehijoshi
          twitter_username: vaidehijoshi
          github_username: vaidehijoshi
          website_url: http://www.vaidehi.com
          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--eDGAYAoK--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg
          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--htZnqMn3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/2882/K2evUksb.jpg
        organization:
          name: Byte Sized
          username: bytesized
          slug: bytesized
          profile_image: https://res.cloudinary.com/practicaldev/image/fetch/s--sq0DrZfn--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png
          profile_image_90: https://res.cloudinary.com/practicaldev/image/fetch/s--1Pt_ICL---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/organization/profile_image/865/652f7998-32a8-4fd9-85ca-dd697d2a9ee9.png
    ArticleCreateTitleBody:
      value:
        article:
          title: Hello, World!
          published: true
          body_markdown: Hello DEV, this is my first post
          tags:
          - discuss
          - help
          series: Hello series
          canonical_url: https://example.com/blog/hello
    ArticleCreateFrontMatter:
      value:
        article:
          body_markdown: |
            ---
            title: Hello, World!
            published: true
            tags: discuss, help
            date: 20190701T10:00Z
            series: Hello series
            canonical_url: https://example.com/blog/hello
            ---

            Hello DEV, this is my first post
    ArticleCreateOrganization:
      value:
        article:
          title: Hello, World!
          published: true
          body_markdown: Hello DEV, this is my first post
          tags:
          - discuss
          - help
          series: Hello series
          canonical_url: https://example.com/blog/hello
          organization_id: 1234
    WebhookCreate:
      value:
        webhook_endpoint:
          target_url: https://example.com/webhooks/webhook1
          source: DEV
          events:
          - article_created
    WebhookShow:
      value:
        type_of: webhook_endpoint
        id: 1
        source: DEV
        target_url: https://example.com/webhooks/webhook1
        events:
        - article_created
        created_at: 2019-09-02T09:47:39.230Z
        user:
          name: bob
          username: bob
          twitter_username: null
          github_username: bob
          website_url: null
          profile_image: '...'
          profile_image_90: '...'
  schemas:
    APIError:
      properties:
        error:
          type: string
        status:
          format: int32
          type: integer
      required:
      - error
      - status
      type: object
    ArticleIndex:
      example:
        readable_publish_date: readable_publish_date
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        title: title
        canonical_url: http://example.com/aeiou
        flare_tag:
          text_color_hex: text_color_hex
          name: name
          bg_color_hex: bg_color_hex
        url: http://example.com/aeiou
        tags: tags
        social_image: http://example.com/aeiou
        path: path
        positive_reactions_count: 1
        tag_list:
        - tag_list
        - tag_list
        comments_count: 6
        last_comment_at: 2000-01-23T04:56:07.000+00:00
        organization:
          profile_image: http://example.com/aeiou
          name: name
          slug: slug
          profile_image_90: http://example.com/aeiou
          username: username
        type_of: type_of
        edited_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        cover_image: http://example.com/aeiou
        published_at: 2000-01-23T04:56:07.000+00:00
        crossposted_at: 2000-01-23T04:56:07.000+00:00
        published_timestamp: 2000-01-23T04:56:07.000+00:00
        user:
          profile_image: profile_image
          website_url: http://example.com/aeiou
          name: name
          twitter_username: twitter_username
          github_username: github_username
          profile_image_90: profile_image_90
          username: username
        slug: slug
      properties:
        type_of:
          type: string
        id:
          format: int32
          type: integer
        title:
          type: string
        description:
          type: string
        cover_image:
          format: url
          type: string
        readable_publish_date:
          type: string
        social_image:
          format: url
          type: string
        tag_list:
          items:
            type: string
          type: array
        tags:
          type: string
        slug:
          type: string
        path:
          format: path
          type: string
        url:
          format: url
          type: string
        canonical_url:
          format: url
          type: string
        comments_count:
          format: int32
          type: integer
        positive_reactions_count:
          format: int32
          type: integer
        created_at:
          format: date-time
          type: string
        edited_at:
          format: date-time
          type: string
        crossposted_at:
          format: date-time
          type: string
        published_at:
          format: date-time
          type: string
        last_comment_at:
          format: date-time
          type: string
        published_timestamp:
          description: Crossposting or published date time
          format: date-time
          type: string
        user:
          $ref: '#/components/schemas/ArticleUser'
        organization:
          $ref: '#/components/schemas/ArticleOrganization'
        flare_tag:
          $ref: '#/components/schemas/ArticleFlareTag'
      required:
      - canonical_url
      - comments_count
      - cover_image
      - created_at
      - crossposted_at
      - description
      - edited_at
      - id
      - last_comment_at
      - path
      - positive_reactions_count
      - published_at
      - published_timestamp
      - readable_publish_date
      - slug
      - social_image
      - tag_list
      - tags
      - title
      - type_of
      - url
      - user
      type: object
    ArticleShow:
      example:
        body_html: body_html
        readable_publish_date: readable_publish_date
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        title: title
        path: path
        tag_list: tag_list
        type_of: type_of
        edited_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        cover_image: http://example.com/aeiou
        published_at: 2000-01-23T04:56:07.000+00:00
        published_timestamp: 2000-01-23T04:56:07.000+00:00
        slug: slug
        canonical_url: http://example.com/aeiou
        flare_tag:
          text_color_hex: text_color_hex
          name: name
          bg_color_hex: bg_color_hex
        url: http://example.com/aeiou
        tags:
        - tags
        - tags
        social_image: http://example.com/aeiou
        positive_reactions_count: 1
        body_markdown: body_markdown
        comments_count: 6
        last_comment_at: 2000-01-23T04:56:07.000+00:00
        organization:
          profile_image: http://example.com/aeiou
          name: name
          slug: slug
          profile_image_90: http://example.com/aeiou
          username: username
        crossposted_at: 2000-01-23T04:56:07.000+00:00
        user:
          profile_image: profile_image
          website_url: http://example.com/aeiou
          name: name
          twitter_username: twitter_username
          github_username: github_username
          profile_image_90: profile_image_90
          username: username
      properties:
        type_of:
          type: string
        id:
          format: int32
          type: integer
        title:
          type: string
        description:
          type: string
        cover_image:
          format: url
          type: string
        readable_publish_date:
          type: string
        social_image:
          format: url
          type: string
        tag_list:
          type: string
        tags:
          items:
            type: string
          type: array
        slug:
          type: string
        path:
          format: path
          type: string
        url:
          format: url
          type: string
        canonical_url:
          format: url
          type: string
        comments_count:
          format: int32
          type: integer
        positive_reactions_count:
          format: int32
          type: integer
        created_at:
          format: date-time
          type: string
        edited_at:
          format: date-time
          type: string
        crossposted_at:
          format: date-time
          type: string
        published_at:
          format: date-time
          type: string
        last_comment_at:
          format: date-time
          type: string
        published_timestamp:
          description: Crossposting or published date time
          format: date-time
          type: string
        body_html:
          type: string
        body_markdown:
          type: string
        user:
          $ref: '#/components/schemas/ArticleUser'
        organization:
          $ref: '#/components/schemas/ArticleOrganization'
        flare_tag:
          $ref: '#/components/schemas/ArticleFlareTag'
      required:
      - body_html
      - body_markdown
      - canonical_url
      - comments_count
      - cover_image
      - created_at
      - crossposted_at
      - description
      - edited_at
      - id
      - last_comment_at
      - path
      - positive_reactions_count
      - published_at
      - published_timestamp
      - readable_publish_date
      - slug
      - social_image
      - tag_list
      - tags
      - title
      - type_of
      - url
      - user
      type: object
    ArticleCreate:
      example:
        article:
          body_markdown: body_markdown
          series: series
          main_image: http://example.com/aeiou
          organization_id: 0
          description: description
          published: true
          title: title
          canonical_url: http://example.com/aeiou
          tags:
          - tags
          - tags
      properties:
        article:
          $ref: '#/components/schemas/ArticleCreate_article'
      type: object
    ArticleUpdate:
      example:
        article:
          body_markdown: body_markdown
          series: series
          main_image: http://example.com/aeiou
          organization_id: 0
          description: description
          published: true
          title: title
          canonical_url: http://example.com/aeiou
          tags:
          - tags
          - tags
      properties:
        article:
          $ref: '#/components/schemas/ArticleUpdate_article'
      type: object
    ArticleMe:
      example:
        description: description
        published: true
        title: title
        canonical_url: http://example.com/aeiou
        flare_tag:
          text_color_hex: text_color_hex
          name: name
          bg_color_hex: bg_color_hex
        url: http://example.com/aeiou
        path: path
        positive_reactions_count: 1
        tag_list:
        - tag_list
        - tag_list
        comments_count: 6
        organization:
          profile_image: http://example.com/aeiou
          name: name
          slug: slug
          profile_image_90: http://example.com/aeiou
          username: username
        type_of: type_of
        page_views_count: 5
        id: 0
        cover_image: http://example.com/aeiou
        published_at: 2000-01-23T04:56:07.000+00:00
        published_timestamp: 2000-01-23T04:56:07.000+00:00
        user:
          profile_image: profile_image
          website_url: http://example.com/aeiou
          name: name
          twitter_username: twitter_username
          github_username: github_username
          profile_image_90: profile_image_90
          username: username
        slug: slug
      properties:
        type_of:
          type: string
        id:
          format: int32
          type: integer
        title:
          type: string
        description:
          type: string
        cover_image:
          format: url
          type: string
        published:
          type: boolean
        published_at:
          format: date-time
          type: string
        tag_list:
          items:
            type: string
          type: array
        slug:
          type: string
        path:
          format: path
          type: string
        url:
          format: url
          type: string
        canonical_url:
          format: url
          type: string
        comments_count:
          format: int32
          type: integer
        positive_reactions_count:
          format: int32
          type: integer
        page_views_count:
          format: int32
          type: integer
        published_timestamp:
          description: Crossposting or published date time
          format: date-time
          type: string
        user:
          $ref: '#/components/schemas/ArticleUser'
        organization:
          $ref: '#/components/schemas/ArticleOrganization'
        flare_tag:
          $ref: '#/components/schemas/ArticleFlareTag'
      required:
      - body_markdown
      - canonical_url
      - comments_count
      - cover_image
      - description
      - id
      - page_views_count
      - path
      - positive_reactions_count
      - published
      - published_at
      - published_timestamp
      - slug
      - tag_list
      - title
      - type_of
      - url
      - user
      type: object
    ArticleUser:
      description: The article's creator
      example:
        profile_image: profile_image
        website_url: http://example.com/aeiou
        name: name
        twitter_username: twitter_username
        github_username: github_username
        profile_image_90: profile_image_90
        username: username
      properties:
        name:
          type: string
        username:
          type: string
        twitter_username:
          type: string
        github_username:
          type: string
        website_url:
          format: url
          type: string
        profile_image:
          description: Profile image (640x640)
          type: string
        profile_image_90:
          description: Profile image (90x90)
          type: string
      type: object
    ArticleOrganization:
      description: The organization the article belongs to
      example:
        profile_image: http://example.com/aeiou
        name: name
        slug: slug
        profile_image_90: http://example.com/aeiou
        username: username
      properties:
        name:
          type: string
        username:
          type: string
        slug:
          type: string
        profile_image:
          description: Profile image (640x640)
          format: url
          type: string
        profile_image_90:
          description: Profile image (90x90)
          format: url
          type: string
      type: object
    ArticleFlareTag:
      description: Flare tag of the article
      example:
        text_color_hex: text_color_hex
        name: name
        bg_color_hex: bg_color_hex
      properties:
        name:
          type: string
        bg_color_hex:
          description: Background color (hexadecimal)
          type: string
        text_color_hex:
          description: Text color (hexadecimal)
          type: string
      type: object
    WebhookCreate:
      description: Webhook creation payload
      example:
        webhook_endpoint:
          target_url: http://example.com/aeiou
          source: source
          events:
          - events
          - events
      properties:
        webhook_endpoint:
          $ref: '#/components/schemas/WebhookCreate_webhook_endpoint'
      type: object
    WebhookShow:
      description: Webhook
      example:
        target_url: http://example.com/aeiou
        created_at: 2000-01-23T04:56:07.000+00:00
        type_of: type_of
        id: 0
        source: source
        user:
          profile_image: profile_image
          website_url: http://example.com/aeiou
          name: name
          twitter_username: twitter_username
          github_username: github_username
          profile_image_90: profile_image_90
          username: username
        events:
        - events
        - events
      properties:
        type_of:
          type: string
        id:
          format: int64
          type: integer
        source:
          description: The name of the requester, eg. "DEV"
          type: string
        target_url:
          format: url
          type: string
        events:
          description: An array of events identifiers
          items:
            type: string
          type: array
        created_at:
          format: date-time
          type: string
        user:
          $ref: '#/components/schemas/ArticleUser'
      type: object
    WebhookIndex:
      description: Webhook
      example:
        target_url: http://example.com/aeiou
        created_at: 2000-01-23T04:56:07.000+00:00
        type_of: type_of
        id: 0
        source: source
        events:
        - events
        - events
      properties:
        type_of:
          type: string
        id:
          format: int64
          type: integer
        source:
          description: The name of the requester, eg. "DEV"
          type: string
        target_url:
          format: url
          type: string
        events:
          description: An array of events identifiers
          items:
            type: string
          type: array
        created_at:
          format: date-time
          type: string
      type: object
    ArticleCreate_article:
      example:
        body_markdown: body_markdown
        series: series
        main_image: http://example.com/aeiou
        organization_id: 0
        description: description
        published: true
        title: title
        canonical_url: http://example.com/aeiou
        tags:
        - tags
        - tags
      properties:
        title:
          type: string
        body_markdown:
          description: |
            The body of the article.

            It can contain an optional front matter. For example

            ```markdown
            ---
            title: Hello, World!
            published: true
            tags: discuss, help
            date: 20190701T10:00Z
            series: Hello series
            canonical_url: https://example.com/blog/hello
            cover_image: article_published_cover_image
            ---
            ```

            `date`, `series` and `canonical_url` are optional.
            `date` is the publication date-time
            `series` is the name of the series the article belongs to
            `canonical_url` is the canonical URL of the article
            `cover_image` is the main image of the article

            *If the markdown contains a front matter, it will take precedence
            on the equivalent params given in the JSON payload.*
          type: string
        published:
          description: |
            True to create a published article, false otherwise. Defaults to false
          type: boolean
        series:
          description: |
            Article series name.

            All articles belonging to the same series need to have the same name
            in this parameter.
          type: string
        main_image:
          format: url
          type: string
        canonical_url:
          format: url
          type: string
        description:
          type: string
        tags:
          items:
            type: string
          type: array
        organization_id:
          description: |
            Only users belonging to an organization can assign the article to it
          format: int32
          type: integer
      required:
      - title
    ArticleUpdate_article:
      example:
        body_markdown: body_markdown
        series: series
        main_image: http://example.com/aeiou
        organization_id: 0
        description: description
        published: true
        title: title
        canonical_url: http://example.com/aeiou
        tags:
        - tags
        - tags
      properties:
        title:
          type: string
        body_markdown:
          description: |
            The body of the article.

            It can contain an optional front matter. For example

            ```markdown
            ---
            title: Hello, World!
            published: true
            tags: discuss, help
            date: 20190701T10:00Z
            series: Hello series
            canonical_url: https://example.com/blog/hello
            cover_image: article_published_cover_image
            ---
            ```

            `date`, `series` and `canonical_url` are optional.
            `date` is the publication date-time
            `series` is the name of the series the article belongs to
            `canonical_url` is the canonical URL of the article
            `cover_image` is the main image of the article

            *If the markdown contains a front matter, it will take precedence
            on the equivalent params given in the JSON payload.*
          type: string
        published:
          description: |
            True to create a published article, false otherwise. Defaults to false
          type: boolean
        series:
          description: |
            Article series name.

            All articles belonging to the same series need to have the same name
            in this parameter.

            To remove an article from a series, the `null` value can be used.
          type: string
        main_image:
          format: url
          type: string
        canonical_url:
          format: url
          type: string
        description:
          type: string
        tags:
          items:
            type: string
          type: array
        organization_id:
          description: |
            Only users belonging to an organization can assign the article to it
          format: int32
          type: integer
    WebhookCreate_webhook_endpoint:
      example:
        target_url: http://example.com/aeiou
        source: source
        events:
        - events
        - events
      properties:
        source:
          description: The name of the requester, eg. "DEV"
          type: string
        target_url:
          format: url
          type: string
        events:
          description: An array of events identifiers
          items:
            type: string
          type: array
      required:
      - events
      - source
      - target_url
  securitySchemes:
    api_key:
      description: |
        API Key authentication.

        Authentication for some endpoints, like write operations on the
        Articles API require a DEV API key.

        ### Getting an API key

        To obtain one, please follow these steps:

          - visit https://dev.to/settings/account
          - in the "DEV API Keys" section create a new key by adding a
            description and clicking on "Generate API Key"

            ![obtain a DEV API Key](https://user-images.githubusercontent.com/146201/64421366-af3f8b00-d0a1-11e9-8ff6-7cc0ca6e854e.png)
          - You'll see the newly generated key in the same view
            ![generated DEV API Key](https://user-images.githubusercontent.com/146201/64421367-af3f8b00-d0a1-11e9-9831-73d3bdfdff66.png)
      in: header
      name: api-key
      type: apiKey
    oauth2:
      description: |
        OAuth2 authentication.

        OAuth2 authentication is still in private alpha.
      flows:
        authorizationCode:
          authorizationUrl: https://dev.to/oauth/authorize
          refreshUrl: https://dev.to/oauth/token
          scopes: {}
          tokenUrl: https://dev.to/oauth/token
        clientCredentials:
          refreshUrl: https://dev.to/oauth/token
          scopes: {}
          tokenUrl: https://dev.to/oauth/token
      type: oauth2
