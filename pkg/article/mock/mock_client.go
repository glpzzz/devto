// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_article is a generated GoMock package.
package mock_article

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	devto "github.com/shihanng/devto/pkg/devto"
	http "net/http"
	reflect "reflect"
)

// MockapiClient is a mock of apiClient interface
type MockapiClient struct {
	ctrl     *gomock.Controller
	recorder *MockapiClientMockRecorder
}

// MockapiClientMockRecorder is the mock recorder for MockapiClient
type MockapiClientMockRecorder struct {
	mock *MockapiClient
}

// NewMockapiClient creates a new mock instance
func NewMockapiClient(ctrl *gomock.Controller) *MockapiClient {
	mock := &MockapiClient{ctrl: ctrl}
	mock.recorder = &MockapiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockapiClient) EXPECT() *MockapiClientMockRecorder {
	return m.recorder
}

// CreateArticle mocks base method
func (m *MockapiClient) CreateArticle(arg0 context.Context, arg1 *devto.ArticlesApiCreateArticleOpts) (devto.ArticleShow, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", arg0, arg1)
	ret0, _ := ret[0].(devto.ArticleShow)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateArticle indicates an expected call of CreateArticle
func (mr *MockapiClientMockRecorder) CreateArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockapiClient)(nil).CreateArticle), arg0, arg1)
}

// UpdateArticle mocks base method
func (m *MockapiClient) UpdateArticle(arg0 context.Context, arg1 int32, arg2 *devto.ArticlesApiUpdateArticleOpts) (devto.ArticleShow, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", arg0, arg1, arg2)
	ret0, _ := ret[0].(devto.ArticleShow)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateArticle indicates an expected call of UpdateArticle
func (mr *MockapiClientMockRecorder) UpdateArticle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockapiClient)(nil).UpdateArticle), arg0, arg1, arg2)
}

// GetUserAllArticles mocks base method
func (m *MockapiClient) GetUserAllArticles(arg0 context.Context, arg1 *devto.ArticlesApiGetUserAllArticlesOpts) ([]devto.ArticleMe, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAllArticles", arg0, arg1)
	ret0, _ := ret[0].([]devto.ArticleMe)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserAllArticles indicates an expected call of GetUserAllArticles
func (mr *MockapiClientMockRecorder) GetUserAllArticles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAllArticles", reflect.TypeOf((*MockapiClient)(nil).GetUserAllArticles), arg0, arg1)
}

// Mockconfiger is a mock of configer interface
type Mockconfiger struct {
	ctrl     *gomock.Controller
	recorder *MockconfigerMockRecorder
}

// MockconfigerMockRecorder is the mock recorder for Mockconfiger
type MockconfigerMockRecorder struct {
	mock *Mockconfiger
}

// NewMockconfiger creates a new mock instance
func NewMockconfiger(ctrl *gomock.Controller) *Mockconfiger {
	mock := &Mockconfiger{ctrl: ctrl}
	mock.recorder = &MockconfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockconfiger) EXPECT() *MockconfigerMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *Mockconfiger) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockconfigerMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Mockconfiger)(nil).Save))
}

// ImageLinks mocks base method
func (m *Mockconfiger) ImageLinks() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageLinks")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ImageLinks indicates an expected call of ImageLinks
func (mr *MockconfigerMockRecorder) ImageLinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageLinks", reflect.TypeOf((*Mockconfiger)(nil).ImageLinks))
}

// SetImageLinks mocks base method
func (m *Mockconfiger) SetImageLinks(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetImageLinks", arg0)
}

// SetImageLinks indicates an expected call of SetImageLinks
func (mr *MockconfigerMockRecorder) SetImageLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImageLinks", reflect.TypeOf((*Mockconfiger)(nil).SetImageLinks), arg0)
}

// ArticleID mocks base method
func (m *Mockconfiger) ArticleID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArticleID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ArticleID indicates an expected call of ArticleID
func (mr *MockconfigerMockRecorder) ArticleID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticleID", reflect.TypeOf((*Mockconfiger)(nil).ArticleID))
}

// SetArticleID mocks base method
func (m *Mockconfiger) SetArticleID(arg0 int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetArticleID", arg0)
}

// SetArticleID indicates an expected call of SetArticleID
func (mr *MockconfigerMockRecorder) SetArticleID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArticleID", reflect.TypeOf((*Mockconfiger)(nil).SetArticleID), arg0)
}

// CoverImage mocks base method
func (m *Mockconfiger) CoverImage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoverImage")
	ret0, _ := ret[0].(string)
	return ret0
}

// CoverImage indicates an expected call of CoverImage
func (mr *MockconfigerMockRecorder) CoverImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoverImage", reflect.TypeOf((*Mockconfiger)(nil).CoverImage))
}

// SetCoverImage mocks base method
func (m *Mockconfiger) SetCoverImage(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCoverImage", arg0)
}

// SetCoverImage indicates an expected call of SetCoverImage
func (mr *MockconfigerMockRecorder) SetCoverImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCoverImage", reflect.TypeOf((*Mockconfiger)(nil).SetCoverImage), arg0)
}
